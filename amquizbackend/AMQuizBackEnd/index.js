// index.js
require('dotenv').config({ path: '.env.local' });
const http = require('http');
const App = require('./src/app');
const socketManager = require('./src/socket/socketManager');
const PORT = process.env.PORT || 3000;

// Initialiser Firebase (fait automatiquement lors de l'import des services)
console.log('üî• Firebase initialis√©');

// Cr√©er le serveur HTTP avec l'application Express
const server = http.createServer(App.getApp());

// Initialiser Socket.IO
socketManager.initialize(server);

// Gestion propre de l'arr√™t du serveur
const gracefulShutdown = () => {
  console.log('\nüõë Arr√™t du serveur en cours...');
 
  server.close(() => {
    console.log('‚úÖ Serveur HTTP ferm√©');
    process.exit(0);
  });
 
  // Forcer l'arr√™t apr√®s 10 secondes
  setTimeout(() => {
    console.log('‚ö†Ô∏è  Arr√™t forc√© du serveur');
    process.exit(1);
  }, 10000);
};

// √âcouter les signaux d'arr√™t
process.on('SIGTERM', gracefulShutdown);
process.on('SIGINT', gracefulShutdown);

// D√©marrer le serveur
server.listen(PORT, () => {
  console.log(`üöÄ Serveur d√©marr√© sur le port ${PORT}`);
  console.log(`üåç Environnement: ${process.env.NODE_ENV || 'development'}`);
  console.log(`üì° Socket.IO initialis√©`);
  console.log(`üéØ API disponible sur http://localhost:${PORT}/api`);
  console.log(`‚ù§Ô∏è  Health check: http://localhost:${PORT}/health`);
});

// Gestion des erreurs du serveur
server.on('error', (error) => {
  if (error.syscall !== 'listen') {
    throw error;
  }

  switch (error.code) {
    case 'EACCES':
      console.error(`‚ùå Le port ${PORT} n√©cessite des privil√®ges √©lev√©s`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`‚ùå Le port ${PORT} est d√©j√† utilis√©`);
      process.exit(1);
      break;
    default:
      throw error;
  }
});